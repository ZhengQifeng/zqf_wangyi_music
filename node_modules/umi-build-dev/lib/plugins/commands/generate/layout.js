"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = require("path");

var _randomColor = _interopRequireDefault(require("random-color"));

var _assert = _interopRequireDefault(require("assert"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = api => {
  const paths = api.paths,
        config = api.config,
        log = api.log;
  return class Generator extends api.Generator {
    constructor(args, options) {
      super(args, options);

      if (config.routes) {
        log.warn(`You should config the routes in config.routes manunally since ${_chalk.default.red('config.routes')} exists`);
        console.log();
      }
    }

    writing() {
      if (this.options.global) {
        (0, _assert.default)(!this.args.length, `You don't need to specify the path with --global, e.g. umi g layout --global`);
        this.fs.copyTpl((0, _path.join)(__dirname, 'templates', 'layout.js.tpl'), (0, _path.join)(paths.absSrcPath, `layouts`, `index.js`), {
          name: 'index',
          title: `Global Layout`
        });
        this.fs.copyTpl((0, _path.join)(__dirname, 'templates', 'layout.css.tpl'), (0, _path.join)(paths.absSrcPath, `layouts`, `index.css`), {
          color: (0, _randomColor.default)().hexString()
        });
        return;
      }

      const path = this.args[0];
      (0, _assert.default)(typeof path === 'string', `You should specify the path, e.g. umi g layout abc`);
      this.fs.copyTpl((0, _path.join)(__dirname, 'templates', 'layout.js.tpl'), (0, _path.join)(paths.absPagesPath, path, `_layout.js`), {
        name: '_layout',
        title: `Layout for ${path}`
      });
      this.fs.copyTpl((0, _path.join)(__dirname, 'templates', 'layout.css.tpl'), (0, _path.join)(paths.absPagesPath, path, `_layout.css`), {
        color: (0, _randomColor.default)().hexString()
      });
    }

  };
};

exports.default = _default;